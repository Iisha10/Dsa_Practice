class Solution {
public:
// int func(string s1, string s2,  vector<vector<int>>&dp, int i, int j){
//     if(i>=s1.size() || j>=s2.size()){
//         return 0;
//     }
//     if(dp[i][j]!=-1){
//         return dp[i][j];
//     }
//     int take=0;
//     if(s1[i]==s2[j]){
//         take=1+func(s1, s2, dp, i+1, j+1);
//     }
//    int nt=max(func(s1, s2, dp, i, j+1), func(s1, s2, dp, i+1, j));
//    return dp[i][j]=max(take, nt);
// }
    int longestCommonSubsequence(string s1, string s2) {
        int n=s1.size();
        int m=s2.size();
        vector<vector<int>>dp(n+1, vector<int>(m+1, 0));
        for(int i=1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        return dp[n][m];
    }
};
