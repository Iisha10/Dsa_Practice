class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        if(grid[0][0]!=0){
            return -1;
        }
        queue<pair<int, pair<int, int>>>q;
        vector<vector<int>>dist(n, vector<int>(n, 1e9));
        dist[0][0]=0;
        q.push({0, {0, 0}});
        int drow[]={-1, -1, 0, 1, 1, 1, 0, -1};
        int dcol[]={0, 1, 1, 1, 0, -1, -1, -1};
        while(!q.empty()){
            int dis=q.front().first;
            int row=q.front().second.first;
            int col=q.front().second.second;
            q.pop();
            for(int i=0; i<8; i++){
                int nrow=row+drow[i];
                int ncol=col+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && grid[nrow][ncol]==0){
                    if(dis+1<dist[nrow][ncol]){
                        dist[nrow][ncol]=dis+1;
                        q.push({dist[nrow][ncol], {nrow, ncol}});
                    }
                }
            }
        }
        if(dist[n-1][n-1]!=1e9){
            return dist[n-1][n-1]+1;
        }
        return -1;

    }
};
