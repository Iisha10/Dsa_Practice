//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution
{
	public:
	class DisjointSet{
    vector<int>rank, parent;
public:
    DisjointSet(int n){
        rank.resize(n+1, 0);
        parent.resize(n+1);
        for(int i=0; i<=n; i++){
            parent[i]=i;


        }
    }
        int findUparent(int node){
            if(node==parent[node]){
                return node;
            }
            return parent[node]=findUparent(parent[node]);//path compression
        }
        void UnionbyRank(int u, int v){
            int ul_u=findUparent(u);
            int ul_v=findUparent(v);
            if(ul_u==ul_v){
                return ;
            }
            if(rank[ul_u]<rank[ul_v]){
                parent[ul_u]=ul_v;
            }
            else if(rank[ul_v]<rank[ul_u]){
                parent[ul_v]=ul_u;
            }
            else{
                parent[ul_u]=ul_v;
                rank[v]++;
            }

        }
    };
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int, pair<int, int>>>edges;
        for(int i=0; i<V; i++){
            for(auto it:adj[i]){
                int adjnode=it[0];
                int wt=it[1];
                int node=i;
                edges.push_back({wt, {node, adjnode}});
                
            }
        }
        DisjointSet ds(V);
        sort(edges.begin(), edges.end());
        int mstwt=0;
        for(auto it: edges){
            int wt=it.first;
            int u=it.second.first;
            int v=it.second.second;
            if(ds.findUparent(u)!=ds.findUparent(v)){
            mstwt+=wt;
            ds.UnionbyRank(u, v);
        }
        }
         return mstwt;
        
    }
   
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
