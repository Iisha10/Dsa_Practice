//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
void dfs(vector<int>adj[], int u, vector<bool>&vis){
    vis[u]=true;
    for(auto it:adj[u]){
        if(vis[it]==false){
            dfs(adj, it, vis);
        }
    }
}
bool isConnected(int v, vector<int>adj[]){
    int non0vertex=-1;
    for(int i=0; i<v; i++){
        if(adj[i].size()!=0){
            non0vertex=i;
            break;
        }
    }
    vector<bool>vis(v, false);
    dfs(adj, non0vertex,vis);
    for(int i=0; i<v; i++){
        if(vis[i]==false && adj[i].size()!=0){
            return false;
        }
    }
    return true;
}
	int isEulerCircuit(int V, vector<int>adj[]){
	    // Code here
	    if(isConnected(V, adj)==false){
	        return 0;
	    }
	    int odd=0;
	    for(int i=0;i<V; i++){
	        if(adj[i].size()%2!=0){
	            odd++;
	        }
	    }
	   if(odd==2){
	       return 1;
	   }
	   else if(odd>2){
	       return 0;
	   }
	   return 2;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		int ans = obj.isEulerCircuit(V, adj);
		cout << ans <<"\n";	
cout << "~" << "\n";
}
	return 0;
}
// } Driver Code Ends
