#include<bits/stdc++.h>
using namespace std;
class DisjointSet{
    vector<int>rank, parent;
public:
    DisjointSet(int n){
        rank.resize(n+1, 0);
        parent.resize(n+1);
        for(int i=0; i<=n; i++){
            parent[i]=i;


        }
    }
        int findUparent(int node){
            if(node==parent[node]){
                return node;
            }
            return parent[node]=findUparent(parent[node]);//path compression
        }
        void UnionbyRank(int u, int v){
            int ul_u=findUparent(u);
            int ul_v=findUparent(v);
            if(ul_u==ul_v){
                return ;
            }
            if(rank[ul_u]<rank[ul_v]){
                parent[ul_u]=ul_v;
            }
            else if(rank[ul_v]<rank[ul_u]){
                parent[ul_v]=ul_u;
            }
            else{
                parent[ul_u]=ul_v;
                rank[v]++;
            }

        }
    };

int main(){
    DisjointSet ds(7);
    ds.UnionbyRank(1, 2);
    ds.UnionbyRank(2, 3);
    ds.UnionbyRank(4, 5);
    //check if 3, 7 belong to the same component
    if(ds.findUparent(3)==ds.findUparent(7)){
        cout<<"yes they belong to same compnent"<<endl;
    }
    else{
        cout<<"no they dont belong to the same componet"<<endl;
    }
    ds.UnionbyRank(6, 7);
    ds.UnionbyRank(5, 6);
    ds.UnionbyRank(3, 7);
    if(ds.findUparent(3)==ds.findUparent(7)){
        cout<<"yes they belong to same compnent"<<endl;
    }
    else{
        cout<<"no they dont belong to the same componet"<<endl;
    }
    return 0;
}


